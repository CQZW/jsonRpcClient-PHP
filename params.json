{"name":"Jsonrpcclient-php","tagline":"JSON-RPC Client for PHP","body":"# jsonRPC client for PHP\r\n\r\nThe jsonRPCclient class contains three public methods: the constructor jsonRPCClient->__construct(), the jsonRPCClient->__call() method, forwarding the requests to the JSON-RPC server, and the jsonRPCClient->setRPCNotification(), to establish if the requests are normal requests or notifications.\r\n\r\n## Constructor \r\n\r\njsonRPCClient->__construct()\r\n\r\njsonRPCClient->__construct() — Create a new jsonRPCClient object linking it to a JSON-RPC server\r\n\r\n### Description\r\n\r\n<pre>\r\nclass jsonRPCClient {\r\n__construct (string $url[, boolean $debug])\r\n}\r\n</pre>\r\n\r\nCreate a new jsonRPCClient object linking it to a JSON-RPC server. The created object contains all JSON-RPC service's methods, each with the same parameters, and the methods return the same service structured values.\r\nIf required, setting to TRUE the $debug value, debugging informations are sent to the stdout.\r\n\r\n### Parameters\r\n\r\nurl — The JSON-RPS service's URL.\r\ndebug — I TRUE, output on the stdout the dialog between server and client. The default value is FALSE.\r\n\r\n### Return\r\n\r\nReturn a jsonRPCClient object.\r\n\r\n### Example\r\n\r\n<pre>\r\n \r\nrequire_once 'jsonRPCClient.php'; \r\n$myExample = new jsonRPCClient('http://somehostname/path/jsonRPCserver'); \r\n\r\n</pre>\r\n\r\n\r\n## Magic Call\r\n\r\njsonRPCClient->__call()\r\n\r\njsonRPCClient->__call() — Load any called method in the corresponding method of the JSON-RPC server, forwarding the given parameters\r\n\r\n### Description\r\n\r\n<pre>\r\nclass jsonRPCClient {\r\nmixed __call (string $method, array $params)\r\n}\r\n</pre>\r\n\r\nWathever be the called method for the jsonRPCClient object, __call() converts it in the JSON-RPC method with the same name. The parameters also are forwarded in a fully transaparent way.\r\n\r\n__call() is a magic method, it must NOT be called with its own name. It collect every method called (except the explicitely defined ones), converting them in the JSON-RPC form.\r\n\r\n### Parameters\r\n\r\nmethod — The name of the required method.\r\nparams — The parameters set packaged as an array.\r\n\r\n## Return\r\n\r\nReturn the structured value given by the called method. If the method is called as a notification, return TRUE.\r\n\r\n### Example\r\n\r\n<pre>\r\n\r\nrequire_once 'jsonRPCClient.php'; \r\n$myExample = new jsonRPCClient('http://somehostname/path/jsonRPCserver'); \r\n\r\ntry { \r\n    echo 'Your name is <i>'.$myExample->giveMeSomeData('name').'</i><br />'.\"\\n\"; \r\n    $myExample->changeYourState('I am using this function from the network');\r\n    echo 'Your status request has been accepted<br />'.\"\\n\"; \r\n} catch (Exception $e) { \r\n    echo nl2br($e->getMessage()).'<br />'.\"\\n\"; \r\n} \r\n\r\n</pre>\r\n\r\n## Note\r\n\r\nKeep in mind the example: the __call() method isn't called explicitely. Instead, methods that aren't between the explicitely decalred methods of the class are called. These are the JSON-RPC service's methods.\r\n__call() collect every method request not coresponding to any explicitely declared method of the class and manage it as JSON-RPC requests. The parameters too are given as the JSON-RPC method requires, where __call() will package them in an array.\r\nIn this way, the __call() method charges on itself the requests and act as a proxy to the JSON-RPC server.\r\n\r\n\r\n***\r\n\r\n\r\n### Credits\r\n\r\nModified by Gian Carlo Salvati <gian@salvati.com.br>\r\n\r\nBased on Sergio Vaccaro work - Copyright 2007 Sergio Vaccaro <sergio@inservibile.org> See http://jsonrpcphp.org/ for license, docs, sources and info.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}